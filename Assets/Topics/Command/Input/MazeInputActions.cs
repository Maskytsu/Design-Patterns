//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Topics/Command/Input/MazeInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MazeInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MazeInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MazeInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerMazeMap"",
            ""id"": ""f8f7545b-ac2b-4e3d-8bbe-17aa312c7ca4"",
            ""actions"": [
                {
                    ""name"": ""MoveForward"",
                    ""type"": ""Button"",
                    ""id"": ""5eb7e62d-0dea-4fe9-9836-1de562229ee3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveBack"",
                    ""type"": ""Button"",
                    ""id"": ""a6db03bb-fd09-43a5-aa9f-c43179f3253e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""40bf688d-44d0-472d-8c1d-8eef8c605ea5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""7c933393-4281-4f2d-ade0-053e89954e4c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateLeft"",
                    ""type"": ""Button"",
                    ""id"": ""2e5385ff-db57-4abe-b46b-8c10bf04fae0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateRight"",
                    ""type"": ""Button"",
                    ""id"": ""7f639cc5-8fc2-46e7-81fe-6a2e689054b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Undo"",
                    ""type"": ""Button"",
                    ""id"": ""206d67d9-d1cf-4a4f-ad61-44fa83a90c03"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""583d7e78-da65-4242-97f1-9c1dbcb05965"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08d3a34e-cbde-4bdc-9a88-a52ed397ec4f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Undo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc330348-6838-4b71-9ced-822f80158787"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78913aa8-87f3-4aa1-ba83-8d379983b154"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc92ef58-3cbe-42d6-b25c-e58e110f45fb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2751f470-ab4e-465a-9494-3e3fd0251891"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a820a1aa-408a-4ef3-89bb-c5eefaf32f14"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
        // PlayerMazeMap
        m_PlayerMazeMap = asset.FindActionMap("PlayerMazeMap", throwIfNotFound: true);
        m_PlayerMazeMap_MoveForward = m_PlayerMazeMap.FindAction("MoveForward", throwIfNotFound: true);
        m_PlayerMazeMap_MoveBack = m_PlayerMazeMap.FindAction("MoveBack", throwIfNotFound: true);
        m_PlayerMazeMap_MoveLeft = m_PlayerMazeMap.FindAction("MoveLeft", throwIfNotFound: true);
        m_PlayerMazeMap_MoveRight = m_PlayerMazeMap.FindAction("MoveRight", throwIfNotFound: true);
        m_PlayerMazeMap_RotateLeft = m_PlayerMazeMap.FindAction("RotateLeft", throwIfNotFound: true);
        m_PlayerMazeMap_RotateRight = m_PlayerMazeMap.FindAction("RotateRight", throwIfNotFound: true);
        m_PlayerMazeMap_Undo = m_PlayerMazeMap.FindAction("Undo", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMazeMap
    private readonly InputActionMap m_PlayerMazeMap;
    private List<IPlayerMazeMapActions> m_PlayerMazeMapActionsCallbackInterfaces = new List<IPlayerMazeMapActions>();
    private readonly InputAction m_PlayerMazeMap_MoveForward;
    private readonly InputAction m_PlayerMazeMap_MoveBack;
    private readonly InputAction m_PlayerMazeMap_MoveLeft;
    private readonly InputAction m_PlayerMazeMap_MoveRight;
    private readonly InputAction m_PlayerMazeMap_RotateLeft;
    private readonly InputAction m_PlayerMazeMap_RotateRight;
    private readonly InputAction m_PlayerMazeMap_Undo;
    public struct PlayerMazeMapActions
    {
        private @MazeInputActions m_Wrapper;
        public PlayerMazeMapActions(@MazeInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveForward => m_Wrapper.m_PlayerMazeMap_MoveForward;
        public InputAction @MoveBack => m_Wrapper.m_PlayerMazeMap_MoveBack;
        public InputAction @MoveLeft => m_Wrapper.m_PlayerMazeMap_MoveLeft;
        public InputAction @MoveRight => m_Wrapper.m_PlayerMazeMap_MoveRight;
        public InputAction @RotateLeft => m_Wrapper.m_PlayerMazeMap_RotateLeft;
        public InputAction @RotateRight => m_Wrapper.m_PlayerMazeMap_RotateRight;
        public InputAction @Undo => m_Wrapper.m_PlayerMazeMap_Undo;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMazeMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMazeMapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMazeMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMazeMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMazeMapActionsCallbackInterfaces.Add(instance);
            @MoveForward.started += instance.OnMoveForward;
            @MoveForward.performed += instance.OnMoveForward;
            @MoveForward.canceled += instance.OnMoveForward;
            @MoveBack.started += instance.OnMoveBack;
            @MoveBack.performed += instance.OnMoveBack;
            @MoveBack.canceled += instance.OnMoveBack;
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
            @RotateLeft.started += instance.OnRotateLeft;
            @RotateLeft.performed += instance.OnRotateLeft;
            @RotateLeft.canceled += instance.OnRotateLeft;
            @RotateRight.started += instance.OnRotateRight;
            @RotateRight.performed += instance.OnRotateRight;
            @RotateRight.canceled += instance.OnRotateRight;
            @Undo.started += instance.OnUndo;
            @Undo.performed += instance.OnUndo;
            @Undo.canceled += instance.OnUndo;
        }

        private void UnregisterCallbacks(IPlayerMazeMapActions instance)
        {
            @MoveForward.started -= instance.OnMoveForward;
            @MoveForward.performed -= instance.OnMoveForward;
            @MoveForward.canceled -= instance.OnMoveForward;
            @MoveBack.started -= instance.OnMoveBack;
            @MoveBack.performed -= instance.OnMoveBack;
            @MoveBack.canceled -= instance.OnMoveBack;
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
            @RotateLeft.started -= instance.OnRotateLeft;
            @RotateLeft.performed -= instance.OnRotateLeft;
            @RotateLeft.canceled -= instance.OnRotateLeft;
            @RotateRight.started -= instance.OnRotateRight;
            @RotateRight.performed -= instance.OnRotateRight;
            @RotateRight.canceled -= instance.OnRotateRight;
            @Undo.started -= instance.OnUndo;
            @Undo.performed -= instance.OnUndo;
            @Undo.canceled -= instance.OnUndo;
        }

        public void RemoveCallbacks(IPlayerMazeMapActions instance)
        {
            if (m_Wrapper.m_PlayerMazeMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMazeMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMazeMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMazeMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMazeMapActions @PlayerMazeMap => new PlayerMazeMapActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPlayerMazeMapActions
    {
        void OnMoveForward(InputAction.CallbackContext context);
        void OnMoveBack(InputAction.CallbackContext context);
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
        void OnRotateLeft(InputAction.CallbackContext context);
        void OnRotateRight(InputAction.CallbackContext context);
        void OnUndo(InputAction.CallbackContext context);
    }
}
